// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	types "github.com/babylonlabs-io/staking-api-service/internal/types"

	unisat "github.com/babylonlabs-io/staking-api-service/internal/clients/unisat"
)

// UnisatClientInterface is an autogenerated mock type for the UnisatClientInterface type
type UnisatClientInterface struct {
	mock.Mock
}

// FetchInscriptionsUTXOsByAddress provides a mock function with given fields: ctx, address, cursor
func (_m *UnisatClientInterface) FetchInscriptionsUTXOsByAddress(ctx context.Context, address string, cursor uint32) ([]*unisat.UnisatUTXO, *types.Error) {
	ret := _m.Called(ctx, address, cursor)

	if len(ret) == 0 {
		panic("no return value specified for FetchInscriptionsUTXOsByAddress")
	}

	var r0 []*unisat.UnisatUTXO
	var r1 *types.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32) ([]*unisat.UnisatUTXO, *types.Error)); ok {
		return rf(ctx, address, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32) []*unisat.UnisatUTXO); ok {
		r0 = rf(ctx, address, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*unisat.UnisatUTXO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint32) *types.Error); ok {
		r1 = rf(ctx, address, cursor)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// GetBaseURL provides a mock function with given fields:
func (_m *UnisatClientInterface) GetBaseURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDefaultRequestTimeout provides a mock function with given fields:
func (_m *UnisatClientInterface) GetDefaultRequestTimeout() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultRequestTimeout")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetHttpClient provides a mock function with given fields:
func (_m *UnisatClientInterface) GetHttpClient() *http.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHttpClient")
	}

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// NewUnisatClientInterface creates a new instance of UnisatClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnisatClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnisatClientInterface {
	mock := &UnisatClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
